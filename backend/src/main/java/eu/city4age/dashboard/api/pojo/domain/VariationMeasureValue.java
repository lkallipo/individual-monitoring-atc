package eu.city4age.dashboard.api.pojo.domain;

<<<<<<< HEAD
import java.math.BigDecimal;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;

import org.hibernate.annotations.NamedNativeQueries;
import org.hibernate.annotations.NamedNativeQuery;

import com.fasterxml.jackson.annotation.JsonView;

import eu.city4age.dashboard.api.pojo.json.view.View;

@SqlResultSetMappings(value = { @SqlResultSetMapping(name = "avgMapping", columns = { @ColumnResult(name = "avg") }),
		@SqlResultSetMapping(name = "stDevMapping", columns = { @ColumnResult(name = "st_dev") }),
		@SqlResultSetMapping(name = "best25PercMapping", columns = { @ColumnResult(name = "best_25_perc") }),
		@SqlResultSetMapping(name = "delta25PercAvgMapping", columns = { @ColumnResult(name = "delta_25_perc_avg") }) })
@NamedNativeQueries(value = {
		@NamedNativeQuery(name = "VariationMeasureValue.doWeightedAvg", resultSetMapping = "avgMapping", query = "SELECT AVG(vm.measure_value*dv.derivation_weight) AS avg FROM variation_measure_value AS vm INNER JOIN cd_detection_variable AS dv ON dv.id = vm.measure_type_id"),
		@NamedNativeQuery(name = "VariationMeasureValue.doWeightedStDev", resultSetMapping = "stDevMapping", query = "SELECT STDDEV(vm.measure_value*dv.derivation_weight)/AVG(vm.measure_value*dv.derivation_weight) AS st_dev FROM variation_measure_value AS vm INNER JOIN cd_detection_variable AS dv ON dv.id = vm.measure_type_id"),
		@NamedNativeQuery(name = "VariationMeasureValue.doWeightedBest25Perc", resultSetMapping = "best25PercMapping", query = "SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY vm.measure_value*dv.derivation_weight DESC)/AVG(vm.measure_value*dv.derivation_weight) AS best_25_perc FROM variation_measure_value AS vm INNER JOIN cd_detection_variable AS dv ON dv.id = vm.measure_type_id"),
		@NamedNativeQuery(name = "VariationMeasureValue.doWeightedDelta25PercAvg", resultSetMapping = "delta25PercAvgMapping", query = "SELECT (PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY vm.measure_value*dv.derivation_weight DESC)-AVG(vm.measure_value*dv.derivation_weight))/AVG(vm.measure_value*dv.derivation_weight) AS delta_25_perc_avg FROM variation_measure_value AS vm INNER JOIN cd_detection_variable AS dv ON dv.id = vm.measure_type_id") })
/**
 * VariationMeasureValue generated by hbm2java
 */
@Entity
@Table(name = "variation_measure_value")
public class VariationMeasureValue extends AbstractBaseEntity<Long> {
=======
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

@Entity
@Table(name="variation_measure_value")
public class VariationMeasureValue extends AbstractBaseEntity {
>>>>>>> c4a-atc/master

	/**
	 * 
	 */
	private static final long serialVersionUID = 2579000073949031381L;
<<<<<<< HEAD
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "activity_id")
	private Activity activity;
	
	@JsonView(View.VariationMeasureValueView.class)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "measure_type_id", referencedColumnName = "id")
	private DetectionVariable detectionVariable;
	
	@JsonView(View.VariationMeasureValueView.class)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "time_interval_id", referencedColumnName = "id")
	private TimeInterval timeInterval;
	
	
	@JsonView(View.VariationMeasureValueView.class)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_in_role_id")
	private UserInRole userInRole;

	@JsonView(View.VariationMeasureValueView.class)
	@Column(name = "measure_value", precision = 30, scale = 10)
	private BigDecimal measureValue;

	@JsonView(View.VariationMeasureValueView.class)
	@Column(name = "extra_information", length = 1000)
	private String extraInformation;

	
	@Column(name = "data_source_type", length = 1000)
	private String dataSourceType;
=======

	@ManyToOne
    @JoinColumn(name="activity_id")
	private Activity activity;
	
	/*@ManyToOne
    @JoinColumn(name="data_source_type")
	private DataSourceType cdDataSourceType;*/

	@ManyToOne
    @JoinColumn(name="measure_type_id")
	private DetectionVariable cdDetectionVariable;
	
	@Transient
	@ManyToOne
    @JoinColumn(name="time_interval_id")	
	private TimeInterval timeInterval;

	@ManyToOne
    @JoinColumn(name="user_in_role_id")
	private UserInRole userInRole;

	@Column(name="measure_value")
	private Float measureValue;
	
	/*@Column(name="data_source_type")
	@Type(type="eu.city4age.dashboard.api.persist.convert.IntArrayUserType") 
	private int[] cdDataSourceType;*/
	
	@OneToMany
	@JoinColumn(name="variation_measure_id")
	private Set<NumericIndicatorValue> numericIndicatorValues = new HashSet<NumericIndicatorValue>(0);
>>>>>>> c4a-atc/master

	public VariationMeasureValue() {
	}

<<<<<<< HEAD
	public VariationMeasureValue(DetectionVariable detectionVariable, TimeInterval timeInterval,
			UserInRole userInRole) {
		this.detectionVariable = detectionVariable;
=======
	public VariationMeasureValue(//int[] cdDataSourceType, 
			DetectionVariable cdDetectionVariable,
			TimeInterval timeInterval, UserInRole userInRole) {
		//this.cdDataSourceType = cdDataSourceType;
		this.cdDetectionVariable = cdDetectionVariable;
>>>>>>> c4a-atc/master
		this.timeInterval = timeInterval;
		this.userInRole = userInRole;
	}

<<<<<<< HEAD
	public VariationMeasureValue(Activity activity, DetectionVariable detectionVariable, TimeInterval timeInterval,
			UserInRole userInRole, BigDecimal measureValue, String dataSourceType, String extraInformation) {
		this.activity = activity;
		this.detectionVariable = detectionVariable;
		this.timeInterval = timeInterval;
		this.userInRole = userInRole;
		this.measureValue = measureValue;
		this.dataSourceType = dataSourceType;
		this.extraInformation = extraInformation;
=======
	public VariationMeasureValue(Activity activity, //int[] cdDataSourceType,
			DetectionVariable cdDetectionVariable, TimeInterval timeInterval, UserInRole userInRole,
			Float measureValue, Set<NumericIndicatorValue> numericIndicatorValues) {
		this.activity = activity;
		//this.cdDataSourceType = cdDataSourceType;
		this.cdDetectionVariable = cdDetectionVariable;
		this.timeInterval = timeInterval;
		this.userInRole = userInRole;
		this.measureValue = measureValue;
		this.numericIndicatorValues = numericIndicatorValues;
>>>>>>> c4a-atc/master
	}

	public Activity getActivity() {
		return this.activity;
	}

	public void setActivity(Activity activity) {
		this.activity = activity;
	}

<<<<<<< HEAD
	public DetectionVariable getDetectionVariable() {
		return this.detectionVariable;
	}

	public void setDetectionVariable(DetectionVariable detectionVariable) {
		this.detectionVariable = detectionVariable;
=======
	/*public int[] getCdDataSourceType() {
		return cdDataSourceType;
	}

	public void setCdDataSourceType(int[] cdDataSourceType) {
		this.cdDataSourceType = cdDataSourceType;
	}*/

	public DetectionVariable getCdDetectionVariable() {
		return this.cdDetectionVariable;
	}

	public void setCdDetectionVariable(DetectionVariable cdDetectionVariable) {
		this.cdDetectionVariable = cdDetectionVariable;
>>>>>>> c4a-atc/master
	}

	public TimeInterval getTimeInterval() {
		return this.timeInterval;
	}

	public void setTimeInterval(TimeInterval timeInterval) {
		this.timeInterval = timeInterval;
	}

	public UserInRole getUserInRole() {
		return this.userInRole;
	}

	public void setUserInRole(UserInRole userInRole) {
		this.userInRole = userInRole;
	}

<<<<<<< HEAD
	public BigDecimal getMeasureValue() {
		return this.measureValue;
	}

	public void setMeasureValue(BigDecimal measureValue) {
		this.measureValue = measureValue;
	}

	public String getDataSourceType() {
		return this.dataSourceType;
	}

	public void setDataSourceType(String dataSourceType) {
		this.dataSourceType = dataSourceType;
	}

	public String getExtraInformation() {
		return this.extraInformation;
	}

	public void setExtraInformation(String extraInformation) {
		this.extraInformation = extraInformation;
=======
	public Float getMeasureValue() {
		return this.measureValue;
	}

	public void setMeasureValue(Float measureValue) {
		this.measureValue = measureValue;
	}

	public Set<NumericIndicatorValue> getNumericIndicatorValues() {
		return this.numericIndicatorValues;
	}

	public void setNumericIndicatorValues(Set<NumericIndicatorValue> numericIndicatorValues) {
		this.numericIndicatorValues = numericIndicatorValues;
>>>>>>> c4a-atc/master
	}

}
